#!groovy

library "SharedLib@${env.BRANCH_NAME}"

pipeline {
    agent {
        label 'linux'
    }
    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: '')
        string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: '')
        string(name: 'BUILD_CORE', defaultValue: 'true', description: '')
        string(name: 'TEST_ONLY', defaultValue: 'true', description: '')
        string(name: 'DRY_RUN', defaultValue: 'true', description: '')
    }
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage('Prepare') {
            steps {
                cleanupWorkspaceAndCloneRepo()
                sh "git checkout ${env.BRANCH_NAME}"
                purge()
            }
        }
        stage('Build lightning-core') {
            when {
                expression {
                    "${params.BUILD_CORE}" == "true"
                }
            }
            steps {
                buildCore()
            }
        }
        stage('Set release version number') {
            when {
                expression {
                    "${params.TEST_ONLY}" == "false"
                }
            }
            steps {
                dir('lightning-gradle-plugin') {
                    sh "sed -i -e \"/lightningGradlePluginVersion=/ s/=.*/=${params.RELEASE_VERSION}/\" gradle.properties"
                    sh "cat gradle.properties"
                }
                sh "git add -A; git commit -m 'Release version bump'"
            }
        }
        stage('Check') {
            steps {
                dir('lightning-gradle-plugin') {
                    sh './gradlew clean check'
                }
            }
            post {
                always {
                    junit 'lightning-gradle-plugin/build/test-results/integrationTest/*.xml'
                }
            }
        }
        stage('Tag release') {
            when {
                expression {
                    "${params.TEST_ONLY}" == "false"
                }
            }
            steps {
                sh "git tag gradle-plugin-${params.RELEASE_VERSION}"
            }
        }
        stage('Release') {
            when {
                expression {
                    "${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && "${env.BRANCH_NAME}" == "master"
                }
            }
            steps {
                dir('lightning-gradle-plugin') {
                    // Maven Central
                    sh './gradlew clean uploadArchives'
                    // Gradle Plugin Portal
                    sh './gradlew clean publishPlugins'
                }
            }
        }
        stage('Set snapshot version number') {
            when {
                expression {
                    "${params.TEST_ONLY}" == "false"
                }
            }
            steps {
                dir('lightning-gradle-plugin') {
                    sh "sed -i -e \"/lightningGradlePluginVersion=/ s/=.*/=${params.POST_RELEASE_SNAPSHOT_VERSION}/\" gradle.properties"
                    sh "cat gradle.properties"
                }
                sh "git add -A; git commit -m 'Post-release version bump'"
            }
        }
        stage('Push release to origin/master') {
            when {
                expression {
                    "${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && "${env.BRANCH_NAME}" == "master"
                }
            }
            steps {
                push()
            }
        }
    }
}
